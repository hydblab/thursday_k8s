09. PV와 PVC
포드 데이터를  영속적으로 저장하기 위한 옵션
docker volumn = 단일 컨테이너의 디렉토리를 호스트와 공유하여 데이터 보존
쿠버네티스 데이터 보존은 여러개의 워커 노드를 사용하기 때문에, 특정 노드에 저장하는 경우 포드가 다른 노드로 옮겨졌을때 해당 데이터를 사용할수 없게 된다.

퍼시스턴트 볼륨 : 네트워크 상에 스토리지를 마운트해 영속적으로 데이터를 저장할 수 있는 볼륨을 의미
포드 장애로 인한 노드 이동 시에도 지속적인 데이터 제공 가능.
NFS, EBS(aws), Ceph, GluterFs 등이 있음
쿠버네티스도 자체기능 제공.
9.1 로컬 볼륨
hostPath : 호스트와 볼륨을 공유하기 위해 사용
emptyDir : 포드 컨테이너 간에 볼륨을 공유하기 위해 사용
9.1.1 워커 노드의 로컬 디렉토리를 볼륨으로 사용 : hostPath
호스트의 디렉토리를 팟과 공유해 데이터를 저장
Volumes 항목 정의, containers에 VolumeMouts 옵션 사용하여 연결
 
container 기준 /etc/data 폴더에 host의 /tmp 폴더를 마운트 함. 해당 디렉토리에 파일 저장시 host 의 tmp 폴더에 내용 저장됨.
이 경우 다른 node로 pod가 이동시 이전 노드에서 저장된 데이터를 사용할수 없음. -> 특정 노드에만 팟을 띄워야 함
9.1.2 포드 내의 컨테이너 간 임시 데이터 공유 : emptyDir
포드가 실행되는 중에만 필요한 휘발성 데이터를 각 컨테이너가 함께 사용할 수 있도록 임시저장 공간을 생성하는 케이스.
비어있는 상태로 생성되며 포드가 삭제되는 경우 데이터도 함께 삭제됨.

2개 이상의 컨테이너가 있을때 의미가 있음.
하나의 컨테이너가 파일 관리를, 하나의 컨테이너가 해당 파일을 사용하여 동작을 처리하는 경우 유용함.
위 예제의 경우 content-creator 가 /data 내부에 콘텐츠 파일을 생성하게 되면 해당 파일이 아파치 서버를 통해 외부 제공이 되도록 하는 케이스.
9.2 네트워크 볼륨
네트워크를 통해 접근 할 수 있다면 쿠버네티스 내/외부 어느 곳에 존재하더라도 무관.
( 단, AWS의 EBS와 같은 클라우드 종속적인 볼륨을 사용하는 경우 특정 클라우드를 위한 옵션을 별도로 설정해야함 )
네트워크 볼륨은 다양하기 때문에 가장 간단한 NFS 볼륨을 예시로 사용.
볼륨 선택 기준 : 데이터 읽기/쓰기 속도, 마운트방식(1:1 or 1:N), 구축비용 등
*NFS를 네트워크 볼륨으로 사용하기
NFS : Network File System. 대부분의 운영체제에서 사용 가능. 여러 클라이언트가 동시에 마운트하여 사용 가능. 하나의 서버로 간편한 사용이 가능하여 로컬 스토리지처럼 사용 할 수 있다는 장점이 있다.
사용시 NFS 서버/ 클라이언트 가 각각 필요. 
서버 - 네트워크 스토리지 서버. 데이터 저장 공간
클라이언트 - 서버를 마운트하여 스토리지 파일을 읽고 쓰는 역할을 함. - 워커노드로 갈음이 가능하므로 서버만 별도 설치를 필요로 함.
서버를 위한 deployment와 service 생성 후 해당 서버 볼륨을 포드에 마운트 하여 데이터 저장함.

pod 기준으로 yaml 파일의 volumns 항목에 nfs라고 항목을 정의하여 해당 서버 볼륨을 사용한다고 명시해야함. 
이때 주의 점 : dns 이름이 아닌 ip로 설정함. NFS 볼륨 마운트는 워커 노드에서 발생하기 때문에 DNS이름으로 서버에 접근 할수 없다. 

9.3 PV, PVC를 이용한 볼륨 관리
9.3.1 PV, PVC를 사용해야 하는 이유
해당 오브젝트 들은 포드가 볼륨의 세부적인 사항을 몰라도 볼륨을 사용 할 수 있도록 추상화 해주는 역할을 담당.

주요점 : 사용자는 디플로이먼트의 yaml 파일에 볼륨의 상세한 스펙을 정의하지 않아도 된다.
deployment yaml 파일에 외부 볼륨을 필요로 한다는 사실만을 명시 > 퍼시스턴트 볼륨 이 생성되어있다면 매칭됨. 

9.3.2 사용하기
aws에서 kops로 쿠버네티스를 설치했다면 pv를 EBS와 연동하여 사용 할수 있음.
GKE에서 쿠버네티스를 사용하는 경우 Persistant Disk라는 볼륨을 사용할수 있음.
AWS 예시
EBS 생성 (사이즈 옵션으로 크기 정의) > 볼륨 Id를 별도로 기록
ebs-pv.yaml 파일을 이용해 쿠버네티스에서 퍼시스턴트 볼륨을 등록. 이때 volumnId에 EBS id를 등록하여 연결.
<여기서 Volume_id 항목
ebs-pod-pvc.yaml 파일에서 pvc를 먼저 정의하여 생성. 볼륨 조건을 나열.
 조건 : 5기가, readwriteonce 속성
생성되어있는 pv가 pvc가 요구하는 조건에 부합하기 때문에 연결됨.

팟에서 persistantVolumeClaim을 사용하도록 설정하여 컨테이너에 마운트 함.

그냥 쓰는 것보다 할 것도 많고 아주 귀찮지만 어플리케이션 배포 입장에서는 볼륨의 상세 스펙을 할 필요없이 추상화된 인터페이스로 활용할수 있다는 점이 개이득이다.
9.3.3 pv를 선택하기 위한 조건 명시
어플리케이션에 필요한 최소 조건을 맞추기 위해 pvc를 통해 쿠버네티스에 알려줄 필요가 있음
accessmodes, 볼륨 크기, 스토리지 클래스, 라벨 셀렉터등을 통해 볼륨 선택 가능
accessmodes 
RWO(ReadWriteOnce) : 1:1 마운트만 가능, 읽기 쓰기 가능
ROX(ReadOnlyMany) : 1:N 마운트 가능, 읽기 전용
RWX(ReadWriteMany) : 1:N 마운트 가능. 읽기 쓰기 가능
ex) EBS의 경우 RW모두 가능하며 1:1 마운트만 가능. NFS 서버의 경우 1:N 가능
size도 자주 사용되는 조건임.
이경우 볼륨의 메타 데이터 상 조건일 뿐 볼륨이 정말 해당 사이즈를 가지도록 강제하지는 않는다. (해당 사이즈의 파티션을 생성하는 것은 아님)
적당한 볼륨을 매칭시켜주기 위한 라벨링에 가까운 개념으로 생각’
스토리지 클래스
볼륨의 대표 속성
동적 생성을 위한 용도로 사용 (추후 서술)
Pv와 PVC 양측에 같은 네이밍으로 storageClassName 을 선언하게 되면 서로 연결됨.
라벨 셀렉터
matchLabels 항목을 정의하여 특정 볼륨과 바인드 하는 것이 가능함
9.3.4 퍼시스턴트 볼륨의 라이프 사이클과 Reclaim Policy
Status
Available  : 퍼시스턴트 볼륨 갓 생성 했을때 
Bound : 퍼시스턴트 볼륨 클레임을 새로 생성하여 바인드 했을 때. (다른 pvc와 연결할수 없음)
Released : 퍼시스턴트 볼륨 클레임을 삭제했을때 (사용이 끝남을 의미)
해당 상태의 볼륨을 바로 사용 할수는 없지만 데이터는 보존 되어 있기 때문에 볼륨 삭제 후 새로 생성하여 사용은 가능하다.
Reclaim Policy : PVC를 삭제했을때, PV에 저장된 데이터를 어떻게 처리 할 것인지 별도로 설정하는 것. 
실제 pv와 pvc가 연결되어있을때, 컨테이너에 볼륨이 마운트 되어있다면 storage object in use protection 옵션이 자동으로 적용됨. 이 경우 볼륨을 삭제하더라도 실제 삭제되지는 않는다. pvc를 사용하는 팟이 존재하고 있다면 해당 연결성이 사라지기 전까지는 삭제 되지 않도록 보호됨.
Retain : released상태로 변경된 볼륨의 데이터를 그대로 저장 (기본 설정값)
Delete :  볼륨의 사용이 끝난지 자동으로 볼륨이 삭제, 가능하다면 외부 스토리지도 함께 삭제됨. (해당 볼륨에 저장되어있던 파일 전체 유실)
Recycle : 볼륨 내 데이터 전체 삭제 후 pv를 available 상태로 변경
delete나 recycle은 모든 유형의 스토리지에 대해 쓸수 있는 것은 아님. 
aws의 ebs나 gcp의 영구 디시트는 동적으로 스토리지를 프로비저닝 하기 때문에 delete 정책 사용이 가능함. nfs의 경우 delete는 적용이 불가능하지만 recycle 의 사용이 가능함.
9.3.5 StorageClass와 Dynamic Provisioning
다이나믹 프로비저닝 : PVC가 요구하는 조건에 충족하는 PV가 없는 경우, 자동으로 PV와 외부 스토리지를 함께 프로비저닝 하는 기능.
미리 PV를 만들어두지 않아도 PVC를 생성하면 외부 스토리지가 자동으로 생긴다.
이때 스토리지 클래스를 활용하여 외부 스토리지 생성 정보를 사전에 정의할 수 있음.



storage class 정의를 먼저 해 두고 PVC에서 storageClassName 을 세팅하여 해당 정의에서 선언한 속성에 맞춰 PV를 생성하고 외부 스토리지와 바인딩 할 수 있다. 
단 해당 기능을 사용 하려면 다이나믹 프로비저닝 기능이 지원되는 스토리지 프로비저너가 미리 활성화 되어있어야 한다.(aws, gcp는 자동으로 해줌)
aws에서 다이나믹 프로비저닝 사용 예제
스토리지 클래스 생성

provisioner > EBS 동적 프로비저너 세팅. 
type : EBS의 종류. st1, gp2, io1 등을 사용 할수 있음.
스토리지 클래스 생성
해당 스토리지 클래스를 사용하는 퍼시스턴트 볼륨 클레임을 생성하여 다이나믹 프로비저닝을 발생

주의 1 ) 만약 storageClassName을 정의하지 않은 경우 기본 설정 스토리지 클래스를 통해 다이나민 프로비저닝이 수행되기 때문에, 해당 기능 수행을 원하지 않는 경우 storageClassName : “” 등으로 명시적으로 공백 설정을 넣어주는 편이 좋다.
주의 2 ) 스토리지 클래스를 사용하도록 선언 되었더라도 기 생성된 pv가 pvc에서 제한하는 조건을 만족한다면 다이나밍 프로비저닝은 일어나지 않는다. 
주의 3 ) 다이나믹 프로비저닝의 퍼시스턴트 볼륨의 reclaim policy는 자동으로 delete로 설정된다. (스토리지 클래스의 reclaim policy는 기본이 delete이고 이것을 상속 받음) 원하지 않는 경우 storage class의 yaml에 reclaimPolicy : Retain을 명시
다이나믹 프로비저닝에서 특정 스토리지 클래스를 기본 값으로 사용
storageClass 생성 yaml에 storageclass.~/is-default-class : “true” 등의 annotation을 추가함


09. PV와 PVC
포드 데이터를  영속적으로 저장하기 위한 옵션
docker volumn = 단일 컨테이너의 디렉토리를 호스트와 공유하여 데이터 보존
쿠버네티스 데이터 보존은 여러개의 워커 노드를 사용하기 때문에, 특정 노드에 저장하는 경우 포드가 다른 노드로 옮겨졌을때 해당 데이터를 사용할수 없게 된다.

퍼시스턴트 볼륨 : 네트워크 상에 스토리지를 마운트해 영속적으로 데이터를 저장할 수 있는 볼륨을 의미
포드 장애로 인한 노드 이동 시에도 지속적인 데이터 제공 가능.
NFS, EBS(aws), Ceph, GluterFs 등이 있음
쿠버네티스도 자체기능 제공.
9.1 로컬 볼륨
hostPath : 호스트와 볼륨을 공유하기 위해 사용
emptyDir : 포드 컨테이너 간에 볼륨을 공유하기 위해 사용
9.1.1 워커 노드의 로컬 디렉토리를 볼륨으로 사용 : hostPath
호스트의 디렉토리를 팟과 공유해 데이터를 저장
Volumes 항목 정의, containers에 VolumeMouts 옵션 사용하여 연결
 
container 기준 /etc/data 폴더에 host의 /tmp 폴더를 마운트 함. 해당 디렉토리에 파일 저장시 host 의 tmp 폴더에 내용 저장됨.
이 경우 다른 node로 pod가 이동시 이전 노드에서 저장된 데이터를 사용할수 없음. -> 특정 노드에만 팟을 띄워야 함
9.1.2 포드 내의 컨테이너 간 임시 데이터 공유 : emptyDir
포드가 실행되는 중에만 필요한 휘발성 데이터를 각 컨테이너가 함께 사용할 수 있도록 임시저장 공간을 생성하는 케이스.
비어있는 상태로 생성되며 포드가 삭제되는 경우 데이터도 함께 삭제됨.

2개 이상의 컨테이너가 있을때 의미가 있음.
하나의 컨테이너가 파일 관리를, 하나의 컨테이너가 해당 파일을 사용하여 동작을 처리하는 경우 유용함.
위 예제의 경우 content-creator 가 /data 내부에 콘텐츠 파일을 생성하게 되면 해당 파일이 아파치 서버를 통해 외부 제공이 되도록 하는 케이스.
9.2 네트워크 볼륨
네트워크를 통해 접근 할 수 있다면 쿠버네티스 내/외부 어느 곳에 존재하더라도 무관.
( 단, AWS의 EBS와 같은 클라우드 종속적인 볼륨을 사용하는 경우 특정 클라우드를 위한 옵션을 별도로 설정해야함 )
네트워크 볼륨은 다양하기 때문에 가장 간단한 NFS 볼륨을 예시로 사용.
볼륨 선택 기준 : 데이터 읽기/쓰기 속도, 마운트방식(1:1 or 1:N), 구축비용 등
*NFS를 네트워크 볼륨으로 사용하기
NFS : Network File System. 대부분의 운영체제에서 사용 가능. 여러 클라이언트가 동시에 마운트하여 사용 가능. 하나의 서버로 간편한 사용이 가능하여 로컬 스토리지처럼 사용 할 수 있다는 장점이 있다.
사용시 NFS 서버/ 클라이언트 가 각각 필요. 
서버 - 네트워크 스토리지 서버. 데이터 저장 공간
클라이언트 - 서버를 마운트하여 스토리지 파일을 읽고 쓰는 역할을 함. - 워커노드로 갈음이 가능하므로 서버만 별도 설치를 필요로 함.
서버를 위한 deployment와 service 생성 후 해당 서버 볼륨을 포드에 마운트 하여 데이터 저장함.

pod 기준으로 yaml 파일의 volumns 항목에 nfs라고 항목을 정의하여 해당 서버 볼륨을 사용한다고 명시해야함. 
이때 주의 점 : dns 이름이 아닌 ip로 설정함. NFS 볼륨 마운트는 워커 노드에서 발생하기 때문에 DNS이름으로 서버에 접근 할수 없다. 

9.3 PV, PVC를 이용한 볼륨 관리
9.3.1 PV, PVC를 사용해야 하는 이유
해당 오브젝트 들은 포드가 볼륨의 세부적인 사항을 몰라도 볼륨을 사용 할 수 있도록 추상화 해주는 역할을 담당.

주요점 : 사용자는 디플로이먼트의 yaml 파일에 볼륨의 상세한 스펙을 정의하지 않아도 된다.
deployment yaml 파일에 외부 볼륨을 필요로 한다는 사실만을 명시 > 퍼시스턴트 볼륨 이 생성되어있다면 매칭됨. 

9.3.2 사용하기
aws에서 kops로 쿠버네티스를 설치했다면 pv를 EBS와 연동하여 사용 할수 있음.
GKE에서 쿠버네티스를 사용하는 경우 Persistant Disk라는 볼륨을 사용할수 있음.
AWS 예시
EBS 생성 (사이즈 옵션으로 크기 정의) > 볼륨 Id를 별도로 기록
ebs-pv.yaml 파일을 이용해 쿠버네티스에서 퍼시스턴트 볼륨을 등록. 이때 volumnId에 EBS id를 등록하여 연결.
<여기서 Volume_id 항목
ebs-pod-pvc.yaml 파일에서 pvc를 먼저 정의하여 생성. 볼륨 조건을 나열.
 조건 : 5기가, readwriteonce 속성
생성되어있는 pv가 pvc가 요구하는 조건에 부합하기 때문에 연결됨.

팟에서 persistantVolumeClaim을 사용하도록 설정하여 컨테이너에 마운트 함.

그냥 쓰는 것보다 할 것도 많고 아주 귀찮지만 어플리케이션 배포 입장에서는 볼륨의 상세 스펙을 할 필요없이 추상화된 인터페이스로 활용할수 있다는 점이 개이득이다.
9.3.3 pv를 선택하기 위한 조건 명시
어플리케이션에 필요한 최소 조건을 맞추기 위해 pvc를 통해 쿠버네티스에 알려줄 필요가 있음
accessmodes, 볼륨 크기, 스토리지 클래스, 라벨 셀렉터등을 통해 볼륨 선택 가능
accessmodes 
RWO(ReadWriteOnce) : 1:1 마운트만 가능, 읽기 쓰기 가능
ROX(ReadOnlyMany) : 1:N 마운트 가능, 읽기 전용
RWX(ReadWriteMany) : 1:N 마운트 가능. 읽기 쓰기 가능
ex) EBS의 경우 RW모두 가능하며 1:1 마운트만 가능. NFS 서버의 경우 1:N 가능
size도 자주 사용되는 조건임.
이경우 볼륨의 메타 데이터 상 조건일 뿐 볼륨이 정말 해당 사이즈를 가지도록 강제하지는 않는다. (해당 사이즈의 파티션을 생성하는 것은 아님)
적당한 볼륨을 매칭시켜주기 위한 라벨링에 가까운 개념으로 생각’
스토리지 클래스
볼륨의 대표 속성
동적 생성을 위한 용도로 사용 (추후 서술)
Pv와 PVC 양측에 같은 네이밍으로 storageClassName 을 선언하게 되면 서로 연결됨.
라벨 셀렉터
matchLabels 항목을 정의하여 특정 볼륨과 바인드 하는 것이 가능함
9.3.4 퍼시스턴트 볼륨의 라이프 사이클과 Reclaim Policy
Status
Available  : 퍼시스턴트 볼륨 갓 생성 했을때 
Bound : 퍼시스턴트 볼륨 클레임을 새로 생성하여 바인드 했을 때. (다른 pvc와 연결할수 없음)
Released : 퍼시스턴트 볼륨 클레임을 삭제했을때 (사용이 끝남을 의미)
해당 상태의 볼륨을 바로 사용 할수는 없지만 데이터는 보존 되어 있기 때문에 볼륨 삭제 후 새로 생성하여 사용은 가능하다.
Reclaim Policy : PVC를 삭제했을때, PV에 저장된 데이터를 어떻게 처리 할 것인지 별도로 설정하는 것. 
실제 pv와 pvc가 연결되어있을때, 컨테이너에 볼륨이 마운트 되어있다면 storage object in use protection 옵션이 자동으로 적용됨. 이 경우 볼륨을 삭제하더라도 실제 삭제되지는 않는다. pvc를 사용하는 팟이 존재하고 있다면 해당 연결성이 사라지기 전까지는 삭제 되지 않도록 보호됨.
Retain : released상태로 변경된 볼륨의 데이터를 그대로 저장 (기본 설정값)
Delete :  볼륨의 사용이 끝난지 자동으로 볼륨이 삭제, 가능하다면 외부 스토리지도 함께 삭제됨. (해당 볼륨에 저장되어있던 파일 전체 유실)
Recycle : 볼륨 내 데이터 전체 삭제 후 pv를 available 상태로 변경
delete나 recycle은 모든 유형의 스토리지에 대해 쓸수 있는 것은 아님. 
aws의 ebs나 gcp의 영구 디시트는 동적으로 스토리지를 프로비저닝 하기 때문에 delete 정책 사용이 가능함. nfs의 경우 delete는 적용이 불가능하지만 recycle 의 사용이 가능함.
9.3.5 StorageClass와 Dynamic Provisioning
다이나믹 프로비저닝 : PVC가 요구하는 조건에 충족하는 PV가 없는 경우, 자동으로 PV와 외부 스토리지를 함께 프로비저닝 하는 기능.
미리 PV를 만들어두지 않아도 PVC를 생성하면 외부 스토리지가 자동으로 생긴다.
이때 스토리지 클래스를 활용하여 외부 스토리지 생성 정보를 사전에 정의할 수 있음.



storage class 정의를 먼저 해 두고 PVC에서 storageClassName 을 세팅하여 해당 정의에서 선언한 속성에 맞춰 PV를 생성하고 외부 스토리지와 바인딩 할 수 있다. 
단 해당 기능을 사용 하려면 다이나믹 프로비저닝 기능이 지원되는 스토리지 프로비저너가 미리 활성화 되어있어야 한다.(aws, gcp는 자동으로 해줌)
aws에서 다이나믹 프로비저닝 사용 예제
스토리지 클래스 생성

provisioner > EBS 동적 프로비저너 세팅. 
type : EBS의 종류. st1, gp2, io1 등을 사용 할수 있음.
스토리지 클래스 생성
해당 스토리지 클래스를 사용하는 퍼시스턴트 볼륨 클레임을 생성하여 다이나믹 프로비저닝을 발생

주의 1 ) 만약 storageClassName을 정의하지 않은 경우 기본 설정 스토리지 클래스를 통해 다이나민 프로비저닝이 수행되기 때문에, 해당 기능 수행을 원하지 않는 경우 storageClassName : “” 등으로 명시적으로 공백 설정을 넣어주는 편이 좋다.
주의 2 ) 스토리지 클래스를 사용하도록 선언 되었더라도 기 생성된 pv가 pvc에서 제한하는 조건을 만족한다면 다이나밍 프로비저닝은 일어나지 않는다. 
주의 3 ) 다이나믹 프로비저닝의 퍼시스턴트 볼륨의 reclaim policy는 자동으로 delete로 설정된다. (스토리지 클래스의 reclaim policy는 기본이 delete이고 이것을 상속 받음) 원하지 않는 경우 storage class의 yaml에 reclaimPolicy : Retain을 명시
다이나믹 프로비저닝에서 특정 스토리지 클래스를 기본 값으로 사용
storageClass 생성 yaml에 storageclass.~/is-default-class : “true” 등의 annotation을 추가함


